import random

class MiningGrid:

	def __init__(self):
		self.grid = []
  
	def generate_random(self, h, w, min_val, max_val):
		"""
		Generates a grid of size width (h * w) filled with random values
        between min_val and max_val
        """
		for num in range():
			
		pass

	def mine_sector(self, location:tuple, amount:int):
		"""
		Mines (removes) amount minerals at location. In the event not enough resources
        are present, they will all be mined and the sector would become 0 (depleted)

        Args:
        	location: an (x,y) tuple of the location
            amount: an int representing the amount of minerals to be extracted

        Returns:
        	int: the amount of minerals successfully mined

        
        """
		pass

	def bulk_mine(self, mine_list):
		"""
		Mines the asteroid based on the locations and amount given in mine_list:

        Args:
        	mine_list (tuple): a list of tuples (x,y,a) containing the x, y location and the amount to be mined
            					ex: [ (3,4,100), (4, 9, 70) ]
        Returns:
        	the total amount mined from all locations
        """

	def find_richest_sector(self):
		"""
        Finds the sector (row, column) with the highest resource level.
        Returns a tuple (row, column, value).
        """
		pass

	def find_depleted_sectors(self):
		"""
        Finds all sectors with 0 resources.
        Returns a list of (row, column) tuples.
        """
		pass

  	
	def average_resource_level(self):
		"""
        Calculates the average resource level of the asteroid.
        """
		pass

	def best_region(self):
		"""
      	Determines the best region (2x2 sectors) with the highest mineral count
        
        Returns:
        	A list of 4 (x, y) tuples
        """
		pass